
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 * BookAVisit Frame allows the user to choose a date for a visit in a property
 * @author Pierre-Louis
 */
public class BookAVisit extends javax.swing.JFrame {

    private Agence agence;
    private Property property;
    private Buyer buyer;

    /**
     * Constructor using property on which the booking is made, and the buyer who books
     * @param agence
     * @param property
     * @param buyer
     */
    public BookAVisit(Agence agence, Property property, Buyer buyer) {
        initComponents();
        this.agence = agence;
        this.property = property;
        this.buyer = buyer;

        bookingConfirmed.setVisible(false);
        bookingUnconfirmed.setVisible(false);

        propertyToBook.setText("<html> Adress : " + property.getAdress()
                + "<br>" + "Type : " + property.getType()
                + "<br>" + "Size : " + property.getSize()
                + "<br>" + "Number of rooms : " + property.getBedrooms()
                + "<br>" + "Price : " + property.getPrice() + " euros"
                + "<br>" + "ID : " + property.getID()
                + "<br>" + "Owner : " + property.getProprio());

    }

    /**
     * Constructor without parameters
     */
    public BookAVisit() {
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        propertyToBook = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        bookingConfirmed = new javax.swing.JLabel();
        bookingUnconfirmed = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        offerAmount = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        offerConfirmation = new javax.swing.JButton();
        offerCheck = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("You're about to book a visit of this property : ");

        propertyToBook.setText("jLabel2");

        jButton1.setText("Come back to previous page");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Book");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        bookingConfirmed.setText("Booking confirmed");

        bookingUnconfirmed.setText("There's already a booking for this date ");

        jButton3.setText("Show current Bookings");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setText("Make an offer for this property ");

        jLabel3.setText("Amount : ");

        offerConfirmation.setText("Confirm offer");
        offerConfirmation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                offerConfirmationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(propertyToBook, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bookingConfirmed)
                                    .addComponent(bookingUnconfirmed)
                                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 286, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(offerConfirmation, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                                    .addComponent(offerAmount, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(18, 18, 18)
                                .addComponent(offerCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(19, 19, 19))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(propertyToBook, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(bookingConfirmed)
                        .addGap(14, 14, 14)
                        .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bookingUnconfirmed)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)))
                .addGap(67, 67, 67)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(offerAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(offerCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(offerConfirmation)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 112, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        BuyerMenu buyerMenu = new BuyerMenu(agence, buyer);
        buyerMenu.setVisible(true);
        this.dispose();

    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * Method used to see if the property is available for a booking on the date choosen by the user or not
     * @return boolean
     */
    public boolean testAvailabilityBooking() {
        for (int i = 0; i < agence.getArraylistBooking().size(); ++i) {
            for (int j = 0; j < agence.getArraylistBooking().size(); ++j) {
                if (agence.getArraylistBooking().get(i).getDate().compareTo(jDateChooser1.getDate()) == 0) {
                    if (agence.getArraylistBooking().get(i).getProperty().getID() == property.getID()) {
                        return false;
                    }
                }
            }

        }
        return true;
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        int counter = 0;

        if (testAvailabilityBooking()) {
            try {
                try {
                    String newDate; 
                    SimpleDateFormat formatter2 = new SimpleDateFormat("yyyy-MM-dd");
                    // newDate = formatter2.parse(jDateChooser1.getDate());
                    agence.registrateNewBooking(jDateChooser1.getDate(), buyer.getID(), property.getID(), agence);
                } catch (ParseException ex) {
                    Logger.getLogger(BookAVisit.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (SQLException ex) {
                Logger.getLogger(BookAVisit.class.getName()).log(Level.SEVERE, null, ex);
            }

                bookingConfirmed.setVisible(true);
                bookingUnconfirmed.setVisible(false);
            
        } else if (!testAvailabilityBooking()) {
            bookingUnconfirmed.setVisible(true);
            bookingConfirmed.setVisible(false);
        }
        /*
        if(testAvailabilityBooking()){
            Booking booking = new Booking(jDateChooser1.getDate(), agence, buyer, property);
            agence.getArraylistBooking().add(booking);
            bookingConfirmed.setVisible(true);
            bookingUnconfirmed.setVisible(false);
        }
        else if(!testAvailabilityBooking()){
            bookingUnconfirmed.setVisible(true);
            bookingConfirmed.setVisible(false);
        }
         */

 /*
        for (int i = 0; i < agence.getArraylistBooking().size(); ++i) {
            // if (agence.getArraylistBooking().get(i).getProperty().getID() != property.getID()) {
                if (agence.getArraylistBooking().get(i).getDate().compareTo(jDateChooser1.getDate()) == 0);
                {
                    // Si la date demandée est déjà réservée pour ce bien et si l'id de ce bien correspond à l'id du bien où la date a déjà été enregistrée
                    counter = 1;
                    bookingUnconfirmed.setVisible(true);
                    bookingConfirmed.setVisible(false);
                }
            
        }
        if (counter == 0) {
            System.out.println("enculé");
            Booking booking = new Booking(jDateChooser1.getDate(), agence, buyer, property);
            agence.getArraylistBooking().add(booking);
            bookingConfirmed.setVisible(true);
            bookingUnconfirmed.setVisible(false);
        }
         */
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        for (int i = 0; i < agence.getArraylistBooking().size(); ++i) {
            System.out.println(" reservation n°" + (i + 1) + " le " + agence.getArraylistBooking().get(i).getDate() + " par : " + agence.getArraylistBooking().get(i).getBuyer().getNom() + " " + agence.getArraylistBooking().get(i).getBuyer().getPrenom());
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void offerConfirmationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_offerConfirmationActionPerformed
        // TODO add your handling code here:
        int amount;
        int counter = 0;
        amount = Integer.parseInt(offerAmount.getText());

        for (int i = 0; i < agence.getArraylistOffer().size(); ++i) {
            if (agence.getArraylistOffer().get(i).getBuyer() == buyer && agence.getArraylistOffer().get(i).getProperty() == property) {
                counter = 1;
            }
        }
        if (counter == 0) {
            try {
                System.out.println("Ca marche");
                agence.registrateNewOffer(buyer.getID(), property.getID(), amount, agence);
            } catch (SQLException ex) {
                Logger.getLogger(BookAVisit.class.getName()).log(Level.SEVERE, null, ex);
            }
            offerCheck.setText("Offer accepted");
            
        } else if (counter == 1) {
            offerCheck.setText("You have already made an offer for this property");
        }
    }//GEN-LAST:event_offerConfirmationActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookAVisit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookAVisit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookAVisit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookAVisit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookAVisit().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bookingConfirmed;
    private javax.swing.JLabel bookingUnconfirmed;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField offerAmount;
    private javax.swing.JLabel offerCheck;
    private javax.swing.JButton offerConfirmation;
    private javax.swing.JLabel propertyToBook;
    // End of variables declaration//GEN-END:variables
}
